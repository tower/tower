#!/usr/bin/env node

// "dependencies" or "message"
var command = process.argv[process.argv.length - 1];

// process.env.NODE_PATH.split(':'), process.config.variables.node_prefix
// global npm on windows: C:\Program Files (x86)\nodejs\node_modules\
// global node on windows: process.execPath == C:\Program Files (x86)\nodejs\node.exe
// if process.cwd().match(dirname(process.execPath)) then maybe assume it's npm install -g
var fs = require('fs');
var path = require('path');
var os = require('os');
var exec = require('child_process').exec;

// @todo normalize install/global directories in a more robust way, for comparison.
function normalize(directory) {
  return directory.split(path.sep).slice(0, 3).join(path.sep);
}

function uniq(array) {
  return Object.keys(arrayToHash(array));
};

function arrayToHash(array) {
  var hash = {};

  array.forEach(function(item) {
    if (!hash[item]) {
      hash[item] = true;
    }
  });

  return hash;
}

function repeat(string, times) {
  return new Array(isNaN(times) ? 1 : ++times).join(string);
}

function sentence(array) {
  if (array.length > 1) {
    var last = array.pop();
    return array.join(', ') + ' and ' + last;
  } else {
    return array[0];
  }
}

// strips ansi escape sequences from string
function clean(string) {
  '\u001b[m'
  return string.replace(/\u001b\[\d*(?:;\d+)?m/g, '');
}

function checkInstalled(commands, callback) {
  var installed = {missing: []};
  var names = Object.keys(commands);

  function check() {
    var name = names.shift();
    var command = commands[name];

    exec('which ' + command, function(error, stdout, stderr) {
      var success = !!(!error && stdout && stdout != '');

      installed[name] = success;

      if (!success) {
        installed.missing.push(name);
      }

      if (names.length) {
        process.nextTick(check);
      } else {
        callback(installed);
      }
    }); 
  }

  check();
}

// Old code, but maybe useful later.
//
// '/usr/local/lib/node_modules/tower' => '/usr/local'
// 'C:\Program Files (x86)\nodejs\node_modules\tower' => 'C:\Program Files (x86)\nodejs'
//var installDirectory = normalize(process.cwd());
// '/usr/local/Cellar/node/0.8.2/bin'
//var globalDirectory = normalize(path.dirname(process.execPath));
//var isGlobal = installDirectory === globalDirectory;

// this lets us know if we ran `npm install` vs. `npm link tower`, etc.
// the ORIGINAL npm command args
var npmArgs;
if (process.env.npm_config_argv) {
  npmArgs = JSON.parse(process.env.npm_config_argv).original;
} else {
  npmArgs = [];
}
var npmOptions = arrayToHash(npmArgs);
var isGlobal = !!(npmOptions['-g'] || npmOptions['--global']);
var isGlobalLink = !!(npmArgs[0] == 'link' && npmArgs.length == 1);
var isLocalLink = !!(npmArgs[0] == 'link' && npmArgs.length > 1 && npmArgs[0].charAt(0) != '-');
var isRemote = !!npmArgs.join(' ').match('git://');
var isMac = process.platform == 'darwin';
var isWindows = process.platform == 'win32';
var isLinux = process.platform == 'linux';

if (command == 'dependencies') {
  var packageJSON = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf-8'));
  var dependencies = [];

  var testDependencies = Object.keys(packageJSON['testDependencies']);
  var globalDependencies = Object.keys(packageJSON['globalDependencies']);
  var localDependencies = Object.keys(packageJSON['localDependencies']);

  // if you're linking to local app on mac/linux, assuming you have built the project,
  // copy the new tower project.
  //if (isLocalLink && os.platform().match(/darwin|linux/)) {
  //  process.stdout.write('rm vendor/javascripts/tower.js');
  //  process.stdout.write('cp ' + path.join(__dirname, '../dist/tower.js') + ' vendor/javascripts/tower.js');
  //}

  // if it's installed from the git repo, install everything.
  if (!isLocalLink && !isGlobalLink && fs.existsSync('.gitignore')) {
    dependencies = dependencies.concat(testDependencies).concat(globalDependencies).concat(localDependencies);
  } else {
    if (isGlobal || isGlobalLink) {
      // if you're installing it globally, only include bare minimum.
      dependencies = dependencies.concat(globalDependencies);
    } else if (!isLocalLink) {
      // otherwise install like normal.
      dependencies = dependencies.concat(localDependencies);
    }
    // if installing from github, you'll have to compile the source.
    if (isRemote) {
      dependencies.push('coffee-script@>=1.3.3'); 
    }
  }

  if (dependencies && dependencies.length) {
    process.stdout.write('npm install ' + uniq(dependencies).join(' '));
  } else {
    // console.log('linked to local');
  }
} else if (command == 'message' && isGlobal && !isGlobalLink) { // this one doesn't install anything
  var style = fs.readFileSync(path.join(__dirname, 'tower.css'), 'utf8');
  var css = require('term-css');

  var _renderHeader = css.compile('{header}{separator}', style);
  var _renderItem = css.compile('  {key}:  {value}', style);
  var _renderCode = css.compile('  {caret} {code}', style);
  var _renderWelcome = css.compile('{welcome}', style);
  var _renderComment = css.compile('{comment}', style);
  var _renderWarning = css.compile('{warning}', style);
  var _renderKeyword = css.compile('{keyword}', style);

  function renderWelcome(string) {
    return _renderWelcome({welcome: string});
  }

  function renderHeader(string, separator) {
    return _renderHeader({header: string, separator: separator || ''});
  }

  function renderItem(key, value) {
    return _renderItem({key: key, value: value});
  }

  function renderCode(code) {
    return _renderCode({caret: '$', code: code});
  }

  function renderComment(string) {
    return _renderComment({comment: string});
  }

  function renderWarning(string) {
    return _renderWarning({warning: string});
  }

  function renderKeyword(string) {
    return _renderKeyword({keyword: string});
  }

  var message = [''];

  var commands = {
    git: 'git',
    mongodb: 'mongod',
    //redis: 'redis-server',
    heroku: 'heroku',
    grunt: 'grunt',
    'coffee-script': 'cake'
  };

  var installDirections = {
    'coffee-script': 'npm install coffee-script -g',
    'grunt': 'npm install grunt -g'
  };

  if (isMac) {
    installDirections.git = 'brew install git';
    installDirections.mongodb = 'brew install mongodb';
    installDirections.redis = 'brew install redis';
    installDirections.heroku = 'gem install heroku';
  }

  checkInstalled(commands, function(installed) {
    message.push(renderWelcome('Tower is installed!'));
    message.push('');

    if (process.version < 'v0.8.0') {
      var supportLevel;
      var render;
      if (process.version < 'v0.6.0') {
        render = renderWarning;
        supportLevel = 'unsupported';
      } else {
        render = renderComment;
        supportLevel = 'outdated';
      }
      message.push(render("Note: You are using an " + supportLevel + " version of node (" + process.version + ")."));
      message.push(render("Please upgrade to the latest version of node (>= v0.8.2)."));
      message.push('');
    }

    // Not sure if there is a clean way to tell if this stuff is installed cross-platform.
    var missing = installed.missing;

    // todo need better api
    var i = missing.indexOf('heroku');
    if (i >= 0)
      missing.splice(i, 1);

    if (missing.length) {
      message.push('Please install ' + sentence(missing.map(renderKeyword)) + ' before continuing:');
      message.push('');
      message.push('  https://github.com/viatropos/tower/wiki/Development-and-Workflow-Tips');
      
      // missing.forEach(function(command) {
      //   if (installDirections[command]) {
      //     message.push(renderCode(installDirections[command]));
      //   } else {
      //     // @todo
      //   }
      // });

      message.push('');
    }

    message.push(renderHeader('Create an app', ':'));
    message.push('');
    message.push(renderCode('tower new app'));
    message.push(renderCode('cd app'));
    message.push(renderCode('npm install'));
    message.push(renderCode('tower generate scaffold post title:string body:text belongsTo:user'));
    message.push(renderCode('tower generate scaffold user email:string hasMany:posts'));
    message.push(renderCode('cake watch'));
    message.push(renderCode('node server'));
    message.push('');

    if (installed.heroku) {
      message.push(renderHeader('Deploy to Heroku', ':'));
      message.push('');
      message.push(renderCode('cake assets:bundle'));
      message.push(renderCode('git init'));
      message.push(renderCode('git add .'));
      message.push(renderCode('git commit -a -m "first commit"'));
      message.push(renderCode('heroku create'));
      message.push(renderCode('git push heroku master'));
      message.push('');
    }

    message.push(renderHeader('More info', ':'));
    message.push('');
    message.push(renderItem('IRC', '    #towerjs'));
    message.push(renderItem('Docs', '   http://github.com/viatropos/tower/wiki'));
    message.push(renderItem('Roadmap', 'https://github.com/viatropos/tower/blob/master/ROADMAP.md'));
    message.push('');
    
    var max = 0;
    var length;

    function pad(string, length) {
      return '|  ' + string + repeat(' ', max - length) + '  |';
    }

    message.forEach(function(line, i) {
      length = clean(line).length;
      max = Math.max(max, length);
      message[i] = {string: line, length: length};
    });

    message.forEach(function(object, i) {
      message[i] = pad(object.string, object.length);
    });

    var border = repeat('-', max + 4);

    message = ['/' + border + '\\'].concat(message)

    message.push('\\' + border + '/');
    message.push('', '');

    process.stdout.write(message.join('\n'));
  });
}
